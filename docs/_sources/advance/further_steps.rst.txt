*****************************
更進一步
*****************************

當讀者讀到本章時，應該已經學會 Rust 程式設計了。在本章，沒有程式碼範例，筆者提示一些方向，\
讓讀者可以向前邁進。

=============================
站在巨人的肩膀上
=============================

在開始撰寫程式前，花一些時間搜尋別人撰寫的專案，可以節省自己重覆實作相同演算法的時間。在 \
https://crates.io/ 上有許多 Rust 專案，或許可以找到符合自己需求的專案；\
https://docs.rs/ 則有相對應的說明文件。另外，`Awesome Rust <https://github.com/kud1ing/awesome-rust>`_ \
維護一份 Rust 相關的函式庫和框架，也是一個不錯的出發點。利用搜尋引擎來找，也是一個方法，\
通常可以用 *Rust language* 搭配所要找尋的主題，例如用 Google 搜尋 *Rust language bioinformatics* \
導引我們到 Rust-Bio 這個函式庫。

雖然使用別人實作的專案，能夠省下實作的時間。使用前的評估仍然不可少。像是觀察專案的活躍度、\
受歡迎程度、文件完整度等，近年來，透過 GitHub 等結合社群功能的版本控制網站觀察這些指標\
相當容易。在正式將這些外部專案引入自己的程式碼前，最好先撰寫一些簡單的範例程式或測試程式，\
確保這些專案的確符合自己的需求。如果不放心的話，也可額外撰寫簡易的 wrapper 函式，將外部\
專案的影響降到最低。

=============================
軟體授權
=============================

不論是使用別人的專案或是撰寫自己的專案，了解\ **軟體授權 (software licensing)** 是相當\
重要的。即使是 GitHub、Bitbucket 或其他網站上那些隨時可自由下載的專案，仍然要注意其授權。\
Linux 核心可自由下載來使用或學習，但是，實務上曾經有數起因侵犯 Linux 授權而産生的法律訴訟\
案件。以近年來流行的開放原始碼 (open source) 授權來說，\
GPL (GNU General Public License) 是一個感染力較強的授權，若要引入 GPL 軟體，自己的\
軟體也要以 GPL 授權發行，而 BSD 或 MIT 授權相對限制較少。若有專利 (patent) 相關議題，也\
可考慮 Apache License。在撰寫專案的第一天，就要選擇適當的授權，以免因不當的授權使用\
造成損失。

=============================
社群
=============================

Rust 提供數個 IRC 頻道，供 Rust 使用者使用。然而，這些 IRC 頻道要用英文，台灣目前沒有\
自己的 IRC 頻道，不過有 `Facebook 社團 <https://www.facebook.com/groups/857846870916793/>`_。\
`This Week in Rust <https://this-week-in-rust.org/>`_ 是一個以 Rust 為主題的電子報，\
可以每週收到 Rust 相關的訊息。也可以加入 `Rust 的官方 Twitter <https://twitter.com/rustlang>`_ ，\
不定期接收 Rust 的消息。

=============================
下一個專案
=============================

由於 Rust 還是一個相對年輕的語言，不像 Java 或 Python，光是使用現有的社群資源就可以完成\
很多事情，還需要使用者持續地挹注新的資源。不論是要以 Rust 實作新的函式庫，或是製作\
某個 C/C++ 函式庫的 binding，都是可以考慮的方向。同樣地，在撰寫新的專案前，先搜尋一下\
現有的專案，試著讓這些專案更完善，不論是報告 bug、建議 feature、貢獻程式碼、\
撰寫教程 (tutorial) 等，用各種方式讓 Rust 社群更加成長，Rust 社群的成長，也會正向回饋到\
自己身上。
